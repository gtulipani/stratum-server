// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controller

import (
	"context"
	"github.com/gorilla/websocket"
	"stratum-server/service"
	"sync"
)

var (
	lockServiceMockGetExtraNonce2         sync.RWMutex
	lockServiceMockHealth                 sync.RWMutex
	lockServiceMockRunWebsocketConnection sync.RWMutex
)

// Ensure, that ServiceMock does implement service.Service.
// If this is not the case, regenerate this file with moq.
var _ service.Service = &ServiceMock{}

// ServiceMock is a mock implementation of service.Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked service.Service
//         mockedService := &ServiceMock{
//             GetExtraNonce2Func: func() int64 {
// 	               panic("mock out the GetExtraNonce2 method")
//             },
//             HealthFunc: func() *service.HealthResponse {
// 	               panic("mock out the Health method")
//             },
//             RunWebsocketConnectionFunc: func(ctx context.Context, conn *websocket.Conn)  {
// 	               panic("mock out the RunWebsocketConnection method")
//             },
//         }
//
//         // use mockedService in code that requires service.Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// GetExtraNonce2Func mocks the GetExtraNonce2 method.
	GetExtraNonce2Func func() int64

	// HealthFunc mocks the Health method.
	HealthFunc func() *service.HealthResponse

	// RunWebsocketConnectionFunc mocks the RunWebsocketConnection method.
	RunWebsocketConnectionFunc func(ctx context.Context, conn *websocket.Conn)

	// calls tracks calls to the methods.
	calls struct {
		// GetExtraNonce2 holds details about calls to the GetExtraNonce2 method.
		GetExtraNonce2 []struct {
		}
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// RunWebsocketConnection holds details about calls to the RunWebsocketConnection method.
		RunWebsocketConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Conn is the conn argument value.
			Conn *websocket.Conn
		}
	}
}

// GetExtraNonce2 calls GetExtraNonce2Func.
func (mock *ServiceMock) GetExtraNonce2() int64 {
	if mock.GetExtraNonce2Func == nil {
		panic("ServiceMock.GetExtraNonce2Func: method is nil but Service.GetExtraNonce2 was just called")
	}
	callInfo := struct {
	}{}
	lockServiceMockGetExtraNonce2.Lock()
	mock.calls.GetExtraNonce2 = append(mock.calls.GetExtraNonce2, callInfo)
	lockServiceMockGetExtraNonce2.Unlock()
	return mock.GetExtraNonce2Func()
}

// GetExtraNonce2Calls gets all the calls that were made to GetExtraNonce2.
// Check the length with:
//     len(mockedService.GetExtraNonce2Calls())
func (mock *ServiceMock) GetExtraNonce2Calls() []struct {
} {
	var calls []struct {
	}
	lockServiceMockGetExtraNonce2.RLock()
	calls = mock.calls.GetExtraNonce2
	lockServiceMockGetExtraNonce2.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ServiceMock) Health() *service.HealthResponse {
	if mock.HealthFunc == nil {
		panic("ServiceMock.HealthFunc: method is nil but Service.Health was just called")
	}
	callInfo := struct {
	}{}
	lockServiceMockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	lockServiceMockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//     len(mockedService.HealthCalls())
func (mock *ServiceMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceMockHealth.RLock()
	calls = mock.calls.Health
	lockServiceMockHealth.RUnlock()
	return calls
}

// RunWebsocketConnection calls RunWebsocketConnectionFunc.
func (mock *ServiceMock) RunWebsocketConnection(ctx context.Context, conn *websocket.Conn) {
	if mock.RunWebsocketConnectionFunc == nil {
		panic("ServiceMock.RunWebsocketConnectionFunc: method is nil but Service.RunWebsocketConnection was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Conn *websocket.Conn
	}{
		Ctx:  ctx,
		Conn: conn,
	}
	lockServiceMockRunWebsocketConnection.Lock()
	mock.calls.RunWebsocketConnection = append(mock.calls.RunWebsocketConnection, callInfo)
	lockServiceMockRunWebsocketConnection.Unlock()
	mock.RunWebsocketConnectionFunc(ctx, conn)
}

// RunWebsocketConnectionCalls gets all the calls that were made to RunWebsocketConnection.
// Check the length with:
//     len(mockedService.RunWebsocketConnectionCalls())
func (mock *ServiceMock) RunWebsocketConnectionCalls() []struct {
	Ctx  context.Context
	Conn *websocket.Conn
} {
	var calls []struct {
		Ctx  context.Context
		Conn *websocket.Conn
	}
	lockServiceMockRunWebsocketConnection.RLock()
	calls = mock.calls.RunWebsocketConnection
	lockServiceMockRunWebsocketConnection.RUnlock()
	return calls
}
